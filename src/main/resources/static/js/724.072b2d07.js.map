{"version":3,"file":"js/724.072b2d07.js","mappings":"gKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACF,EAAII,GAAG,UAAUJ,EAAIK,GAAGJ,KAAKK,OAAOC,OAAOC,WAAWN,EAAG,SAAS,CAACO,GAAG,CAAC,MAAQT,EAAIU,UAAU,CAACV,EAAII,GAAG,SAASF,EAAG,MAAMF,EAAII,GAAG,WAAWJ,EAAIW,GAAIX,EAAIY,UAAU,SAASC,EAAKC,GAAK,OAAOZ,EAAG,OAAO,CAACa,IAAID,GAAK,CAACd,EAAII,GAAG,IAAIJ,EAAIK,GAAGQ,GAAM,MAAM,IAAGX,EAAG,MAAMA,EAAG,QAAQ,CAACc,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,UAAUC,MAAOnB,EAAIoB,QAASC,WAAW,YAAYC,SAAS,CAAC,MAAStB,EAAIoB,SAAUX,GAAG,CAAC,MAAQ,SAASc,GAAWA,EAAOC,OAAOC,YAAiBzB,EAAIoB,QAAQG,EAAOC,OAAOL,MAAK,KAAKjB,EAAG,SAAS,CAACO,GAAG,CAAC,MAAQT,EAAI0B,gBAAgB,CAAC1B,EAAII,GAAG,QAAQF,EAAG,MAAMA,EAAG,MAAMF,EAAIW,GAAIX,EAAI2B,aAAa,SAASC,EAAEd,GAAK,OAAOZ,EAAG,MAAM,CAACa,IAAID,GAAK,CAAEc,EAAEC,SAAU3B,EAAG,MAAM,CAACF,EAAII,GAAGJ,EAAIK,GAAGuB,EAAEC,UAAU,OAAO7B,EAAIK,GAAGuB,EAAER,SAAS,MAAMpB,EAAIK,GAAGuB,EAAEE,KAAKC,YAAY,KAAK/B,EAAIK,GAAGuB,EAAEE,KAAKE,cAAc,KAAKhC,EAAIK,GAAGuB,EAAEE,KAAKG,cAAc,OAAO/B,EAAG,MAAM,CAACF,EAAII,GAAGJ,EAAIK,GAAGuB,EAAER,aAAa,IAAG,IAAI,EACh6B,EACIc,EAAkB,G,0DCsBtB,GACAC,OACA,OACAvB,SAAAA,GACAQ,QAAAA,GACAO,YAAAA,GACAS,YAAAA,EAEA,EACAC,UACA,YACA,EACAC,QAAAA,CAEAC,QAEA,iCAYA,2BAZA,CACA,kEACA,0CACA,sCACA,IACA,KACAC,QAAAA,IAAAA,YACA,yBAEA,CAKA,EACAC,kBACA,6CACA,gDAEA,kCACA,EACAC,kBACAF,QAAAA,IAAAA,eAAAA,QAAAA,eACAG,EAAAA,EAAAA,KAAAA,+CAAAA,eAAAA,QAAAA,cAAAA,CAAAC,QAAAA,CAAA,uCAAAT,WACA,sBAEA,uBAGAK,QAAAA,IAAAA,qBAAAA,EAAAA,YACA,oFAEA,yBACAK,EAAAA,KAAAA,IAAAA,KAAAA,EAAAA,MACA,4BAEA,wCAEA,yFACAL,QAAAA,IAAAA,4CACAA,QAAAA,IAAAA,KAAAA,MAAAA,EAAAA,OACA,yBACA,4CACA,4CACA,gBACAA,QAAAA,IAAAA,EAAAA,SACA,OACApB,QAAAA,EAAAA,UAEA,wBACA,CACA,gBACAoB,QAAAA,IAAAA,EAAAA,UACA,OACApB,QAAAA,EAAAA,WAEA,wBACA,CAEA,mBAEA,0CAEA,EACAM,gBAEA,SACAN,QAAAA,KAAAA,QACAS,SAAAA,KAAAA,OAAAA,OAAAA,QAEA,qHACA,eACA,EACA,eACAiB,MAAAA,cAGA,sJACA,mGAEA,EACApC,UACA,sBACA,GAEA,oCACA,cACAqC,GACA,GChIwP,I,UCOpPC,GAAY,OACd,EACAjD,EACAmC,GACA,EACA,KACA,KACA,MAIF,EAAec,EAAiB,O","sources":["webpack://realsocket/./src/views/ChatView.vue","webpack://realsocket/src/views/ChatView.vue","webpack://realsocket/./src/views/ChatView.vue?defa","webpack://realsocket/./src/views/ChatView.vue?8981"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_vm._v(\" 방이름 : \"+_vm._s(this.$route.params.roomName)),_c('button',{on:{\"click\":_vm.outChat}},[_vm._v(\"나가기\")]),_c('br'),_vm._v(\" 참가자 : \"),_vm._l((_vm.userList),function(user,idx){return _c('span',{key:idx},[_vm._v(\" \"+_vm._s(user)+\" \")])}),_c('hr'),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.message),expression:\"message\"}],domProps:{\"value\":(_vm.message)},on:{\"input\":function($event){if($event.target.composing)return;_vm.message=$event.target.value}}}),_c('button',{on:{\"click\":_vm.submitMessage}},[_vm._v(\"전송\")]),_c('hr'),_c('div',_vm._l((_vm.messageList),function(m,idx){return _c('div',{key:idx},[(m.nickname)?_c('div',[_vm._v(_vm._s(m.nickname)+\" :: \"+_vm._s(m.message)+\" / \"+_vm._s(m.date.getHours())+\"시 \"+_vm._s(m.date.getMinutes())+\"분 \"+_vm._s(m.date.getSeconds())+\"초\")]):_c('div',[_vm._v(_vm._s(m.message))])])}),0)],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        방이름 : {{this.$route.params.roomName}}<button @click=\"outChat\">나가기</button><br>\r\n        참가자 :\r\n        <span v-for=\"(user, idx) in userList\" :key=\"idx\">\r\n            {{user}}\r\n        </span>\r\n        <hr>\r\n        <input v-model=\"message\" />\r\n        <button @click=\"submitMessage\">전송</button>\r\n        <hr>\r\n        <div>\r\n            <div v-for=\"(m, idx) in messageList\" :key=\"idx\">\r\n                <div v-if=\"m.nickname\">{{m.nickname}} :: {{m.message}} / {{m.date.getHours()}}시 {{m.date.getMinutes()}}분 {{m.date.getSeconds()}}초</div>\r\n                <div v-else>{{m.message}}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport Stomp from 'webstomp-client'\r\nimport SockJS from 'sockjs-client'\r\nexport default {\r\n    data() {\r\n        return {\r\n            userList: [],\r\n            message: \"\",\r\n            messageList: [],\r\n            routerFlag: false\r\n        }\r\n    },\r\n    created() {\r\n        this.start();\r\n    },\r\n    methods: {\r\n        //시작할 땐 stompClient가 있는지 없는지 검사해봐요 새로고침하면 stompClient가 없어지니까요\r\n        start() {\r\n            //stompClient가 없다면 먼저 stompClient객체를 만들어 줘요\r\n            if (!this.$store.state.stompClient) {\r\n                const socket = new SockJS(process.env.VUE_APP_URL + '/realsocket/websocket');\r\n                this.$store.state.stompClient = Stomp.over(socket);\r\n                this.$store.state.stompClient.connect(\r\n                    {},\r\n                    () => {\r\n                    console.log(\"야호 연결성공요\")\r\n                    this.updateSubscribe();\r\n                });\r\n            }\r\n            //stompClient가 있다면 바로 subscribe를 갱신해요\r\n            else {\r\n                this.updateSubscribe();\r\n            }\r\n        },\r\n        subscribeCancel() {\r\n            for(let sub of this.$store.state.subscribeList) {\r\n                this.$store.state.stompClient.unsubscribe(sub.id);\r\n            }\r\n            this.$store.state.subscribeList = [];\r\n        },\r\n        updateSubscribe() {\r\n            console.log(sessionStorage.getItem(\"roomNumber\"))\r\n            axios.post(process.env.VUE_APP_URL + '/realsocket/findRoom', sessionStorage.getItem(\"roomNumber\"), { headers: {'Content-Type': 'text/plain'}}).then(({data}) => {\r\n                this.userList = data.users;\r\n                // 방리스트에 관한 구독을 끊어요\r\n                this.subscribeCancel()\r\n                // 들어간 채팅방에 대한 구독을 해요\r\n                // 첫 번째 구독은 메세지에 대한 구독이에요\r\n                console.log(\"data.roomNumber : \", data.roomNumber)\r\n                const messageSubscribeId = this.$store.state.stompClient.subscribe(\"/topic/message/\" + data.roomNumber, (e) => {\r\n                    //메세지를 받았어요 메세지는 e.body에 있고 {message: ~~~, nickname: ~~, date: ~~~}에요\r\n                    var rawData = JSON.parse(e.body);\r\n                    rawData.date = new Date(rawData.date);\r\n                    this.messageList.push(rawData);\r\n                })\r\n                this.$store.state.subscribeList.push(messageSubscribeId);\r\n                // 두 번째 구독은 채팅방 입장 퇴장에 대한 구독이에요\r\n                const NoteSubscribeId = this.$store.state.stompClient.subscribe(\"/topic/notification/\" + data.roomNumber, (e) => {\r\n                    console.log(\"****************************************\")\r\n                    console.log(JSON.parse(e.body));\r\n                    var newList = JSON.parse(e.body);\r\n                    var outbound = this.userList.filter(x => !newList.includes(x))\r\n                    var inbound = newList.filter(x => !this.userList.includes(x))\r\n                    for (var out of outbound) {\r\n                        console.log(out, \"가 나갔어\")\r\n                        var rawData1 = {\r\n                            message: out + \"가 나갔어요\"\r\n                        }\r\n                        this.messageList.push(rawData1)\r\n                    }\r\n                    for (var inb of inbound) {\r\n                        console.log(inb, \"가 들어왔어\")\r\n                        var rawData2 = {\r\n                            message: inb + \"가 들어왔어요\"\r\n                        }\r\n                        this.messageList.push(rawData2)\r\n                    }\r\n                    //유저 목록을 갱신해요\r\n                    this.userList = newList;\r\n                })\r\n                this.$store.state.subscribeList.push(NoteSubscribeId);\r\n            });\r\n        },\r\n        submitMessage() {\r\n            // 전달할 값은 {아이디: 내아이디, 메세지: this.message}에요\r\n            const data = {\r\n                message : this.message,\r\n                nickname : this.$route.params.userId,\r\n            }\r\n            this.$store.state.stompClient.send(\"/socket/sendMessage/\" + sessionStorage.getItem(\"roomNumber\"), JSON.stringify(data), {})\r\n            this.message = \"\";\r\n        },\r\n        async outing() {\r\n            alert('나갈게요')\r\n            // 새 핸들러 만들어서 방넘버와 아이디를 주면 방인스턴스의 users에서 아이디 지우고 send()\r\n            // 또 뒤로가기는 따로 처리해야 되니까 outChat에 인자 달아서 버튼을 눌러서 실행되는건지 뒤로가기로 실행되는건지 구분\r\n            await axios.post(process.env.VUE_APP_URL + '/realsocket/outChat', {\"roomNumber\": sessionStorage.getItem(\"roomNumber\"), \"userId\": this.$route.params.userId}).then(() => {\r\n                this.$store.state.stompClient.send(\"/socket/notification/\" + sessionStorage.getItem(\"roomNumber\"))\r\n            })\r\n        },\r\n        outChat() {\r\n            this.$router.push('/');\r\n        }\r\n    },\r\n    async beforeRouteLeave (to, from, next) {\r\n        await this.outing();\r\n        next();\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChatView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ChatView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChatView.vue?vue&type=template&id=753c876d&\"\nimport script from \"./ChatView.vue?vue&type=script&lang=js&\"\nexport * from \"./ChatView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_v","_s","$route","params","roomName","on","outChat","_l","userList","user","idx","key","directives","name","rawName","value","message","expression","domProps","$event","target","composing","submitMessage","messageList","m","nickname","date","getHours","getMinutes","getSeconds","staticRenderFns","data","routerFlag","created","methods","start","console","subscribeCancel","updateSubscribe","axios","headers","rawData","alert","next","component"],"sourceRoot":""}